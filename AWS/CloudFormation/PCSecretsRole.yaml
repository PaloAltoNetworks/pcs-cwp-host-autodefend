AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::LanguageExtensions'
Description: Stack for IAM role and IAM Instance Profile to Access to Prisma Cloud Secrets
Outputs: 
  MasterRoleARN:
    Description: ARN of the Master Role to be assumed to obtain the Secrets to access Prisma Cloud
    Value:
      Fn::GetAtt: [AssumedRole, Arn]

Parameters:
  MasterRoleName:
    AllowedPattern: '[-_a-zA-Z0-9]+'
    Default: PCSecretMaster
    Description: Name of the Master Role to be assumed to obtain the Secrets to access Prisma Cloud
    Type: String
    MaxLength: 64
    MinLength: 1

  RoleName:
    AllowedPattern: '[-_a-zA-Z0-9]+'
    Default: PCSecret
    Description: Name of the Role to be Assigned to the EC2 Instances
    Type: String
    MaxLength: 64
    MinLength: 1

  SecretArn:
    AllowedPattern: '^arn:aws:secretsmanager:(us(-gov)?|ap|ca|cn|eu|sa)-(central|(north|south)?(east|west)?)-\d:(\d{12})?:secret:[\w+=,.@-]{1,128}$'
    Description: ARN of the Secret where is stored the Access to Prisma Cloud
    Type: String

  SessionName:
    AllowedPattern: '[-_a-zA-Z0-9]+'
    Default: PCSecret3rx5HJvSD1
    Description: Provide the name of the session to Access to Prisma Cloud Secrets. Maximum 64 characters allowed
    Type: String
    MaxLength: 64
    MinLength: 1

  OrganizationId:
    AllowedPattern: ^o-[a-z0-9]{10}$
    Description: Provide the organization ID (Prefix like o-).
    Type: String

  OrganizationalUnitIds:
    AllowedPattern: ^(ou-|r-)[a-z0-9-]+(?:,( )*(ou-|r-)[a-z0-9-]+)*$
    Description: Provide the organizational root OU ID (Prefix like r-) if you want to run it for all the accounts under this Organization. Else provide a comma-separated list of OU ids(Prefix like ou-).
    Type: CommaDelimitedList

Resources:
  AllowSecretAccess:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: AllowSecretAccess
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowGetSecretValue
            Effect: Allow
            Action:
              - "secretsmanager:GetSecretValue"
            Resource: 
              Ref: SecretArn
              
  AssumedRole:
    Type: AWS::IAM::Role
    DependsOn:
      - AllowSecretAccess
    Properties:
      RoleName: 
        Ref:
          MasterRoleName
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - "sts:AssumeRole"
            Condition:
              StringLike:
                aws:PrincipalArn:
                  Fn::Join:
                  - ""
                  - - "arn:aws:iam::*:role/"
                    - 
                      Ref: RoleName
              StringEquals:
                sts:RoleSessionName:
                  Ref: SessionName
                aws:PrincipalOrgID:
                  Ref: OrganizationId
      ManagedPolicyArns:
        - Fn::GetAtt: [AllowSecretAccess, PolicyArn]

  AssumedSecretAccess:
    Type: AWS::IAM::ManagedPolicy
    DependsOn:
    - AssumedRole
    Properties:
      ManagedPolicyName: AssumedSecretAccess
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AssumeSecretAccess
            Effect: Allow
            Action:
              - "sts:AssumeRole"
            Resource: 
              Fn::GetAtt: [AssumedRole, Arn]

  AssumedRoleAccessSecret:
    Type: AWS::IAM::Role
    DependsOn:
      - AssumedSecretAccess
    Properties:
      RoleName: 
        Ref:
          RoleName
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - Fn::GetAtt: [AssumedSecretAccess, PolicyArn]
  
  EC2InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    DependsOn:
      - AssumedRoleAccessSecret
    Properties:
      InstanceProfileName: 
        Ref: RoleName
      Path: "/"
      Roles:
        - 
          Ref: RoleName

  StackSet:
    Type: AWS::CloudFormation::StackSet
    Properties:
      AutoDeployment:
        Enabled: true
        RetainStacksOnAccountRemoval: false
      OperationPreferences:
        FailureTolerancePercentage: 100
        RegionConcurrencyType: PARALLEL
      Parameters:
        - ParameterKey: RoleName
          ParameterValue: 
            Ref: RoleName
        - ParameterKey: RoleArn
          ParameterValue: 
            Fn::GetAtt: [AssumedRole, Arn]
      Capabilities:
        - CAPABILITY_NAMED_IAM
      PermissionModel: SERVICE_MANAGED
      StackInstancesGroup:
        - DeploymentTargets:
            OrganizationalUnitIds: 
              Ref: OrganizationalUnitIds
          Regions:
            - Ref: AWS::Region
      StackSetName:
        Ref: AWS::StackName
      TemplateBody: |
        {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "Stack for IAM roles and user for Serverless Scanning",
          "Outputs": {
            "PrismaCloudRole": {
              "Description": "Prisma Cloud Role ARN",
              "Value": {
                "Fn::GetAtt": [
                  "AssumedRole",
                  "Arn"
                ]
              }
            }
          },
          "Parameters": {
            "RoleName": {
              "AllowedPattern": "[-_a-zA-Z0-9]+",
              "Default": "PCSecret",
              "Description": "Provide the role name used for Access to Prisma Cloud. Maximum 64 characters allowed",
              "Type": "String",
              "MaxLength": 64,
              "MinLength": 1
            },
            "RoleArn": {
              "Description": "ARN of the Role used to the Access Prisma Cloud Secret",
              "Type": "String"
            }
          },
          "Resources": {
            "AssumeSecretAccess": {
              "Type": "AWS::IAM::ManagedPolicy",
              "Properties": {
                "ManagedPolicyName": "AssumeSecretAccess",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Sid": "AssumeSecretAccess",
                      "Effect": "Allow",
                      "Action": [
                        "sts:AssumeRole"
                      ],
                      "Resource": {
                        "Ref": "RoleArn"
                      }
                    }
                  ]
                }
              }
            },
            "AssumedRole": {
              "Type": "AWS::IAM::Role",
              "DependsOn": [
                "AssumeSecretAccess"
              ],
              "Properties": {
                "RoleName": {
                  "Ref": "RoleName"
                },
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": "ec2.amazonaws.com"
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "ManagedPolicyArns": [
                  {
                    "Fn::GetAtt": [
                      "AssumeSecretAccess",
                      "PolicyArn"
                    ]
                  }
                ]
              }
            },
            "InstanceProfile":{
              "Type": "AWS::IAM::InstanceProfile",
              "DependsOn": [
                "AssumedRole"
              ],
              "Properties": {
                "InstanceProfileName": {
                  "Ref": "RoleName"  
                },
                "Path": "/",
                "Roles": [ {
                  "Ref": "RoleName"
                } ]
              }
            }
          }
        }